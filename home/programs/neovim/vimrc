inoremap jk <Esc>
"tnoremap jk <C-\><C-n>
tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<C-\><C-n>"
tnoremap <C-l> <Nop>
cnoremap jk <Esc>
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-Right> :vertical resize +1 <CR>
nnoremap <C-Left> :vertical resize -1 <CR>
nnoremap <C-Up> :resize +3 <CR>
nnoremap <C-Down> :resize -3 <CR>
let mapleader = "\<Space>"
xnoremap <leader>p "_dP
nnoremap <leader>w :w<CR>

"Autoinstall vim-plug {{{
if empty(glob('~/.nvim/autoload/plug.vim'))
  silent !sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
call plug#begin()
" }}} Autoinstall vim-plug

" Iceberg colour scheme {{{
Plug 'cocopon/iceberg.vim'
" }}}

" Typescript plugins {{{
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'jamessan/vim-gnupg'
" }}}

Plug 'LnL7/vim-nix'

" Lightline-bufferline {{{
Plug 'itchyny/lightline.vim'
  let g:lightline = {
    \ 'colorscheme': 'iceberg',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'gitgutter', 'filename' ] ],
    \   'right': [ [ 'percent', 'lineinfo' ],
    \              [ 'syntastic' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightLineFugitive',
    \   'gitgutter': 'LightLineGitGutter',
    \   'readonly': 'LightLineReadonly',
    \   'modified': 'LightLineModified',
    \   'syntastic': 'SyntasticStatuslineFlag',
    \   'filename': 'LightLineFilename'
    \ },
    \ 'separator': { 'left': '▓▒░', 'right': '░▒▓' },
    \ 'subseparator': { 'left': '>', 'right': '' }
    \ }
  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "RO"
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction

  function! LightLineGitGutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added,
          \ g:gitgutter_sign_modified,
          \ g:gitgutter_sign_removed
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction
" }}} Lightline

" Limelight {{{
Plug 'junegunn/limelight.vim'
  let g:limelight_default_coefficient = 0.7
  let g:limelight_conceal_ctermfg = 238
  nmap <silent> gl :Limelight!!<CR>
  xmap gl <Plug>(Limelight)
" }}} Limelight

" {{{ fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
  let g:fzf_nvim_statusline = 0 " disable statusline overwriting
  let $FZF_DEFAULT_COMMAND = 'fd --type f' " Use ag and respect .gitignore

  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>a :Buffers<CR>
  nnoremap <silent> <leader>A :Windows<CR>
  nnoremap <silent> <leader>; :BLines<CR>
  nnoremap <silent> <leader>o :BTags<CR>
  nnoremap <silent> <leader>O :Tags<CR>
  nnoremap <silent> <leader>? :History<CR>
  nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
  nnoremap <silent> <leader>. :AgIn 

  nnoremap <silent> K :call SearchWordWithAg()<CR>
  vnoremap <silent> K :call SearchVisualSelectionWithAg()<CR>

  imap <C-x><C-f> <plug>(fzf-complete-file-ag)
  imap <C-x><C-l> <plug>(fzf-complete-line)

  function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
  endfunction

  function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Ag' selection
  endfunction

  function! SearchWithAgInDirectory(...)
    call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
  endfunction
  command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)
" }}} fzf

" {{{ vim-surround
Plug 'tpope/vim-surround'
" }}}

" {{{ vim-gitgutter
Plug 'airblade/vim-gitgutter'
  let g:gitgutter_map_keys = 0
  let g:gitgutter_max_signs = 200
  let g:gitgutter_realtime = 1
  let g:gitgutter_eager = 1
  let g:gitgutter_sign_removed = '–'
  let g:gitgutter_diff_args = '--ignore-space-at-eol'
  nmap <silent> ]h :GitGutterNextHunk<CR>
  nmap <silent> [h :GitGutterPrevHunk<CR>
  "nnoremap <silent> <Leader>gu :GitGutterRevertHunk<CR>
  "nnoremap <silent> <Leader>gp :GitGutterPreviewHunk<CR><c-w>j
  nnoremap cog :GitGutterToggle<CR>
  "nnoremap <Leader>gt :GitGutterAll<CR>
" }}} vim-gitgutter

" vimwiki {{{
Plug 'vimwiki/vimwiki'
  set nocompatible
  filetype plugin on
  syntax on
  let g:vimwiki_list = [
        \ {'path': '/data/ch_notes/', 'syntax': 'markdown', 'ext': '.md'},
        \ {'path': '/data/vao/basel/', 'syntax': 'markdown', 'ext': '.md'},
        \ {'path': '/data/vap/excel-upload-wiki/', 'syntax': 'markdown', 'ext': '.md'},
        \ ]
  nmap <leader>vv <Plug>VimwikiIndex
" }}} vimwiki

" coc.nvim {{{
Plug 'neoclide/coc.nvim', {'branch': 'release'}
  "" TextEdit might fail if hidden is not set.
  set hidden
  " Some servers have issues with backup files, see #649.
  set nobackup
  set nowritebackup
  set updatetime=300
  set shortmess+=c
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Help Vim recognize *.sbt and *.sc as Scala files
  au BufRead,BufNewFile *.sbt,*.sc set filetype=scala

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  "if has('patch8.1.1068')
    "" Use `complete_info` if your (Neo)Vim version supports it.
    "inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
  "else
    "imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  "endif

  " Use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  "nmap <silent> <Leader>d <Plug>(coc-definition)
  nmap <silent> <Leader>d <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  "nmap <silent> <Leader>n <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> <Leader>k :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  "xmap <leader>f  <Plug>(coc-format-selected)
  "nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    autocmd TermOpen * setlocal nonumber norelativenumber
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  "xmap <leader>a  <Plug>(coc-codeaction-selected)
  "nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current line.
  "nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Introduce function text object
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)

  " Use <TAB> for selections ranges.
  " NOTE: Requires 'textDocument/selectionRange' support from the language server.
  " coc-tsserver, coc-python are the examples of servers that support it.
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  " set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings using CoCList:
  " Show all diagnostics.
  nnoremap <silent> <space>D  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  "nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
  " ------------------- NVIM-COC --------------------------
" }}} coc.nvim

" nnn.vim {{{
Plug 'mcchrish/nnn.vim'
let g:nnn#set_default_mappings = 0
nnoremap <silent> <leader>nn :NnnPicker<CR>i
let g:nnn#layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Debug' } }
" }}} nnn.vim

Plug 'preservim/nerdcommenter'
Plug 'qpkorr/vim-bufkill'


call plug#end()

" General settings
" =======================================================================

" Python settings
autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
" RestructuredText settings
autocmd FileType rst setlocal expandtab tabstop=3  shiftwidth=3 softtabstop=3
"autocmd FileType rst syntax on

set clipboard=unnamed,unnamedplus
set expandtab tabstop=2 shiftwidth=2
set noshowmode
set noswapfile
set mouse=
set cmdheight=1 
set number
set laststatus=2
set showcmd
set nowrap
set ignorecase
set smartcase

colorscheme iceberg
hi Normal guibg=NONE ctermbg=NONE

" Copy current file path to clipboard {{{
nnoremap <leader>% :call CopyCurrentFilePath()<CR>
function! CopyCurrentFilePath() 
  let @+ = expand('%')
  echo @+
endfunction
" }}}

" To prevent git from opening a nested vim session {{{ 
if has('nvim')
  let $GIT_EDITOR = 'nvr -cc split --remote-wait'
endif
" }}}

set numberwidth=3
